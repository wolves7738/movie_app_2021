{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\82109\\\\Desktop\\\\movie_app_2021\\\\src\\\\App.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport Movie from './Movie';\nimport './App.css';\nimport { func } from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isLoading: true,\n      movies: []\n    };\n\n    this.getMovies = async () => {\n      const {\n        data: {\n          data: {\n            movies\n          }\n        }\n      } = await axios.get('https://yts-proxy.now.sh/list_movies.json?sort_by=rating'); //영화 데이터 가져오는 함수 async await 사용이유 : 영화 데이터를 가져오는데 걸리는 시간때문\n\n      this.setState({\n        movies,\n        isLoading: false\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.getMovies(); //constructor() -> render() -> Mount\n  }\n\n  render() {\n    const {\n      isLoading,\n      movies\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"container\",\n      children: isLoading ?\n      /*#__PURE__*/\n      //삼항연산자 isLoading이 true이면 Loading... 출력 false이면 Movie 컴포넌트에 props 전달하여 반환\n      _jsxDEV(\"div\", {\n        className: \"loader\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"loader_text\",\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movies\",\n        children: movies.map(movie => /*#__PURE__*/_jsxDEV(Movie, {\n          id: movie.id,\n          year: movie.year,\n          title: movie.title,\n          summary: movie.summary,\n          poster: movie.medium_cover_image,\n          genres: movie.genres\n        }, movie.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this);\n  }\n\n} //ES6 문법 정리:\n//-템플릿 문자열{} JS 병합문자열은 코드가 지저분하고 길어진다.\n//작은따옴표 대신 -> `(백틱)사용\n//특수기호 ${}안에 변수넣기  \n//----------------------------------예시\n// var cart = {name : '도서', price : 1500}\n// var getTotal = function(cart) {\n//   return `${cart.price}원`\n// }\n// var myCart = `장바구니에 ${cart.name}가 있습니다. 가격은 ${cart.price}원 입니다.`\n//----------------------------------\n//배열이나 객체, 함수에 인자를 표현하는 식에서 사용가능한\n//var array1 = ['one','two']\n//var array2 = ['three','four']\n//var combined = [...array1, ...array2]\n//결과:['one','two','three','four']\n\n\nexport default App;","map":{"version":3,"sources":["C:/Users/82109/Desktop/movie_app_2021/src/App.js"],"names":["React","axios","Movie","func","App","Component","state","isLoading","movies","getMovies","data","get","setState","componentDidMount","render","map","movie","id","year","title","summary","medium_cover_image","genres"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAO,WAAP;AACA,SAASC,IAAT,QAAqB,YAArB;;;AAEA,MAAMC,GAAN,SAAkBJ,KAAK,CAACK,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAChCC,KADgC,GACxB;AACNC,MAAAA,SAAS,EAAE,IADL;AAENC,MAAAA,MAAM,EAAE;AAFF,KADwB;;AAAA,SAYhCC,SAZgC,GAYpB,YAAY;AACtB,YAAM;AACJC,QAAAA,IAAI,EAAE;AACJA,UAAAA,IAAI,EAAE;AAAEF,YAAAA;AAAF;AADF;AADF,UAIH,MAAMP,KAAK,CAACU,GAAN,CAAU,0DAAV,CAJT,CADsB,CAK0D;;AAChF,WAAKC,QAAL,CAAc;AAAEJ,QAAAA,MAAF;AAAUD,QAAAA,SAAS,EAAE;AAArB,OAAd;AACD,KAnB+B;AAAA;;AAqBhCM,EAAAA,iBAAiB,GAAG;AAClB,SAAKJ,SAAL,GADkB,CACA;AACnB;;AAEDK,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEP,MAAAA,SAAF;AAAaC,MAAAA;AAAb,QAAwB,KAAKF,KAAnC;AACA,wBACE;AAAS,MAAA,SAAS,EAAC,WAAnB;AAAA,gBACGC,SAAS;AAAA;AAAK;AACb;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA,+BACE;AAAM,UAAA,SAAS,EAAC,aAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADQ,gBAKR;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA,kBACGC,MAAM,CAACO,GAAP,CAAWC,KAAK,iBACf,QAAC,KAAD;AAEA,UAAA,EAAE,EAAEA,KAAK,CAACC,EAFV;AAGA,UAAA,IAAI,EAAED,KAAK,CAACE,IAHZ;AAIA,UAAA,KAAK,EAAEF,KAAK,CAACG,KAJb;AAKA,UAAA,OAAO,EAAEH,KAAK,CAACI,OALf;AAMA,UAAA,MAAM,EAAEJ,KAAK,CAACK,kBANd;AAOA,UAAA,MAAM,EAAEL,KAAK,CAACM;AAPd,WACKN,KAAK,CAACC,EADX;AAAA;AAAA;AAAA;AAAA,gBADD;AADH;AAAA;AAAA;AAAA;AAAA;AANJ;AAAA;AAAA;AAAA;AAAA,YADF;AAuBD;;AAlD+B,C,CAqDlC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAeb,GAAf","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport Movie from './Movie'\nimport './App.css';\nimport { func } from 'prop-types';\n\nclass App extends React.Component {\n  state = {\n    isLoading: true,\n    movies: [],\n  };\n  \n  //프로미스(Promise)는 자바스크립트 비동기 처리에 사용되는 객체\n  //프로미스(Promise)의 3가지 상태(states)\n  //Pending(대기) : 비동기 처리 로직이 아직 완료되지 않은 상태\n  //Fulfilled(이행) : 비동기 처리가 완료되어 프로미스가 결과 값을 반환해준 상태\n  //Rejected(실패) : 비동기 처리가 실패하거나 오류가 발생한 상태\n\n  getMovies = async () => {\n    const {\n      data: {\n        data: { movies },\n      },\n    }= await axios.get('https://yts-proxy.now.sh/list_movies.json?sort_by=rating'); //영화 데이터 가져오는 함수 async await 사용이유 : 영화 데이터를 가져오는데 걸리는 시간때문\n    this.setState({ movies, isLoading: false });\n  };\n\n  componentDidMount() {\n    this.getMovies(); //constructor() -> render() -> Mount\n  }\n\n  render() {\n    const { isLoading, movies } = this.state;\n    return (\n      <section className=\"container\">\n        {isLoading ? ( //삼항연산자 isLoading이 true이면 Loading... 출력 false이면 Movie 컴포넌트에 props 전달하여 반환\n          <div className=\"loader\"> \n            <span className=\"loader_text\">Loading...</span> \n          </div>\n        ) : (\n          <div className=\"movies\">\n            {movies.map(movie => (\n              <Movie \n              key={movie.id}\n              id={movie.id}\n              year={movie.year}\n              title={movie.title}\n              summary={movie.summary}\n              poster={movie.medium_cover_image}\n              genres={movie.genres}\n              />\n            ))}\n          </div>\n        )}\n      </section>\n    );\n  }\n}\n\n//ES6 문법 정리:\n//-템플릿 문자열{} JS 병합문자열은 코드가 지저분하고 길어진다.\n//작은따옴표 대신 -> `(백틱)사용\n//특수기호 ${}안에 변수넣기  \n//----------------------------------예시\n// var cart = {name : '도서', price : 1500}\n// var getTotal = function(cart) {\n//   return `${cart.price}원`\n// }\n// var myCart = `장바구니에 ${cart.name}가 있습니다. 가격은 ${cart.price}원 입니다.`\n//----------------------------------\n//배열이나 객체, 함수에 인자를 표현하는 식에서 사용가능한\n//var array1 = ['one','two']\n//var array2 = ['three','four']\n//var combined = [...array1, ...array2]\n//결과:['one','two','three','four']\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}